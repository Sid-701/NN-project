# -*- coding: utf-8 -*-
"""FinalExam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HdDb0KhkareIqB1WX2YzEGXdUEFzjRDv
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv1D, Flatten, LSTM, Reshape, Embedding
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
df = pd.read_csv('/content/Final_News_DF_Labeled_ExamDataset (1).csv')

df

features = df.drop(columns=['LABEL']).to_numpy()
labels = df['LABEL']

onehot_encoder = OneHotEncoder(sparse=False)

onehot_encoded = onehot_encoder.fit_transform(labels.values.reshape(-1, 1))

X_train, X_test, y_train, y_test = train_test_split(features, onehot_encoded, test_size=0.2, random_state=42, shuffle=True)

data = df.drop(columns=['LABEL']).to_numpy()

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42, shuffle=True)

X_test

X_train

ann_model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(3, activation='softmax')
])
ann_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

ann_model.summary()

ann_history=ann_model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

loss, accuracy = ann_model.evaluate(X_test,y_test)
print(f'ANN Test Loss: {loss:.4f}, ANN Test Accuracy: {accuracy:.4f}')

cnn_model = Sequential([
    Reshape((X_train.shape[1], 1), input_shape=(X_train.shape[1],)),
    Conv1D(64, kernel_size=3, activation='relu'),
    Flatten(),
    Dense(3, activation='softmax')
])
cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

cnn_history=cnn_model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

cnn_model.summary()

loss, accuracy = cnn_model.evaluate(X_test,y_test)
print(f'CNN Test Loss: {loss:.4f}, CNN Test Accuracy: {accuracy:.4f}')

lstm_model = Sequential()
lstm_model.add(Embedding(input_dim=X_train.shape[1], output_dim=128, input_length=X_train.shape[1]))
lstm_model.add(LSTM(64))
lstm_model.add(Dense(3, activation='softmax'))
lstm_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
lstm_history=lstm_model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

lstm_model.summary()

loss, accuracy = lstm_model.evaluate(X_test,y_test)
print(f'LSTM Test Loss: {loss:.4f}, LSTM Test Accuracy: {accuracy:.4f}')

ann_predictions = np.argmax(ann_model.predict(X_test.reshape(X_test.shape[0], X_test.shape[1], 1)), axis=1)
cnn_predictions = np.argmax(cnn_model.predict(X_test.reshape(X_test.shape[0], X_test.shape[1], 1)), axis=1)
lstm_predictions = np.argmax(lstm_model.predict(X_test.reshape(X_test.shape[0], X_test.shape[1], 1)), axis=1)

label_encoder = LabelEncoder()
integer_encoded = label_encoder.fit_transform(df['LABEL'])

ann_predictions_labels = label_encoder.inverse_transform(ann_predictions)
cnn_predictions_labels = label_encoder.inverse_transform(cnn_predictions)
lstm_predictions_labels = label_encoder.inverse_transform(lstm_predictions)

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
cm = confusion_matrix(label_encoder.inverse_transform(np.argmax(y_test, axis=1)), cnn_predictions_labels, labels=['politics', 'football', 'science'])
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Reds', xticklabels=['politics', 'football', 'science'], yticklabels=['politics', 'football', 'science'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix - CNN')
plt.show()

cm = confusion_matrix(label_encoder.inverse_transform(np.argmax(y_test, axis=1)), ann_predictions_labels, labels=['politics', 'football', 'science'])
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Reds', xticklabels=['politics', 'football', 'science'], yticklabels=['politics', 'football', 'science'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix - ANN')
plt.show()

cm = confusion_matrix(label_encoder.inverse_transform(np.argmax(y_test, axis=1)), lstm_predictions_labels, labels=['politics', 'football', 'science'])
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Reds', xticklabels=['politics', 'football', 'science'], yticklabels=['politics', 'football', 'science'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix -LSTM')
plt.show()

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(ann_history.history['accuracy'])
plt.plot(ann_history.history['val_accuracy'])
plt.title('ANN Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.subplot(1, 2, 2)
plt.plot(ann_history.history['loss'])
plt.plot(ann_history.history['val_loss'])
plt.title('ANN Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')

plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(cnn_history.history['accuracy'])
plt.plot(cnn_history.history['val_accuracy'])
plt.title('CNN Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.subplot(1, 2, 2)
plt.plot(cnn_history.history['loss'])
plt.plot(cnn_history.history['val_loss'])
plt.title('CNN Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')

plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(lstm_history.history['accuracy'])
plt.plot(lstm_history.history['val_accuracy'])
plt.title('LSTM Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.subplot(1, 2, 2)
plt.plot(lstm_history.history['loss'])
plt.plot(lstm_history.history['val_loss'])
plt.title('LSTM Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')

plt.tight_layout()
plt.show()